# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
name: Build and Test .NET projects

on:
  push:
    paths-ignore:
      - "**/*.docs"
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"

  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"
          cache-dependency-path: SRC/Web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: SRC/Web
        run: npm install

      - name: Build Tailwind CSS
        working-directory: SRC/Web
        run: npm run build:css

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Create Test Results Directory
        run: mkdir -p "$GITHUB_WORKSPACE/TestResults"

      - name: Run all tests in all test projects
        run: |
          for proj in $(find . -name "*.csproj" -path "*/Tests/*"); do
            name=$(basename "$proj" .csproj)
            filename="${name}_${timestamp}.trx"
            dotnet test "$proj" --no-build --no-restore --logger "trx;LogFileName=${{ github.workspace }}/TestResults/${filename}.trx" --settings runsettings.xml
          done

      - name: Workspace And TestResults Folder
        id: check-testresults
        run: |
          echo "=== TestResults Diagnostic Information ==="
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "Current directory: $(pwd)"
          echo ""
          echo "=== Repository Root Contents ==="
          ls -la "$GITHUB_WORKSPACE" || true
          echo ""
          echo "=== Checking TestResults Folder ==="
          echo "Looking for TestResults folder at: $GITHUB_WORKSPACE/TestResults"
          if [ -d "$GITHUB_WORKSPACE/TestResults" ]; then
            echo "✅ TestResults folder found"
            echo ""
            echo "=== TestResults Directory Contents ==="
            ls -la "$GITHUB_WORKSPACE/TestResults" || true
            echo ""
            echo "=== Recursive Search for .trx Files ==="
            echo "Searching for .trx files recursively in TestResults directory..."
            # count .trx files recursively in TestResults with verbose output
            trx_files=$(find "$GITHUB_WORKSPACE/TestResults" -type f -name "*.trx" 2>/dev/null || true)
            trx_count=$(echo "$trx_files" | grep -c . 2>/dev/null || echo "0")
            echo "Search command: find \"$GITHUB_WORKSPACE/TestResults\" -type f -name \"*.trx\""
            echo "Files found: $trx_count"
            
            if [ "$trx_count" -gt 0 ]; then
              echo "✅ Found $trx_count .trx file(s) in TestResults (recursive search)"
              echo ""
              echo "=== List of .trx Files Found ==="
              echo "$trx_files"
              echo ""
              echo "=== File Details ==="
              find "$GITHUB_WORKSPACE/TestResults" -type f -name "*.trx" -exec ls -la {} \; 2>/dev/null || true
              echo ""
              echo "=== Short Previews (first 200 lines) of each .trx file ==="
              while IFS= read -r file; do
                if [ -n "$file" ] && [ -f "$file" ]; then
                  echo "--- Contents of: $file (first 200 lines) ---"
                  head -n 200 "$file" 2>/dev/null || echo "Error reading file: $file"
                  echo "--- End of $file ---"
                  echo ""
                fi
              done <<< "$trx_files"
              echo "found_trx=true" >> "$GITHUB_OUTPUT"
            else
              echo "❌ No .trx files found in TestResults directory"
              echo "found_trx=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "❌ TestResults folder NOT found"
            echo "found_trx=false" >> "$GITHUB_OUTPUT"
          fi
          echo ""
          echo "=== Summary ==="
          echo "TestResults folder exists: $([ -d \"$GITHUB_WORKSPACE/TestResults\" ] && echo 'true' || echo 'false')"
          echo "TRX files found: $([ -f \"$GITHUB_OUTPUT\" ] && grep -o 'found_trx=.*' \"$GITHUB_OUTPUT\" | cut -d'=' -f2 || echo 'unknown')"

      - name: Upload Test Results
        if: ${{ steps.check-testresults.outputs.found_trx == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results
          path: ${{ github.workspace }}/TestResults/**/*.trx

      - name: Codecov
        if: github.actor != 'nektos/act'
        uses: codecov/codecov-action@v5.4.3
      - name: Upload test results to Codecov
        if: ${{ !cancelled() && github.actor != 'nektos/act' }}
        uses: codecov/test-results-action@v1

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        id: test-results
        # When running locally with act the GITHUB_ACTOR is 'nektos/act' and
        # the runner can't access GitHub's API for local commit SHAs. Skip
        # publishing test results (which queries commits/pull requests) in
        # that case to avoid 403/422 API errors.
        if: always() && github.actor != 'nektos/act'
        with:
          # Disable creating GitHub check runs when running locally with act
          # (this avoids the "You must authenticate via a GitHub App" 403 error
          # that happens because act can't emulate GitHub App authentication).
          check_run: false
          files: |
            ${{ github.workspace }}/TestResults/**/*.trx

      - name: Install GitVersion
        if: github.actor != 'nektos/act'
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: "6.3.x"

      - name: Use GitVersion
        if: github.actor != 'nektos/act'
        id: gitversion # step id used as a reference for output values
        uses: gittools/actions/gitversion/execute@v4.1.0

      - name: Show GitVersion
        if: github.actor != 'nektos/act'
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"