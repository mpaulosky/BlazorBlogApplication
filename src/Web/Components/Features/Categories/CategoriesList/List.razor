@page "/categories"

@inject NavigationManager Navigation
@inject GetCategories.IGetCategoriesHandler CategoriesHandler
@inject ILogger<List> Logger

@attribute [Authorize]

<PageHeadingComponent HeaderText="Categories" Level="1" TextColorClass="blue-500"/>
<p class="text-gray-600">Welcome @_username!</p>

@if (_isLoading)
{
	<LoadingComponent/>
}
else if (_categories is null || !_categories.Any())
{
	<div class="alert alert-info">
		<ErrorAlertComponent Title="No categories available.">
			@(_errorMessage ?? "Categories not found.")
		</ErrorAlertComponent>
		<button class="btn btn-success mt-3" @onclick="GoToCreate">CategoryCreate New Category</button>
	</div>
}
else
{
	<table class="table">
		<thead>
		<tr>
			<th>Category Name</th>
			<th>Created On</th>
			<th>Modified On</th>
			<th>Archived</th>
			<th>Actions</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var category in _categories)
		{
			<tr>
				<td>@category.CategoryName</td>
				<td>@(category.CreatedOn.ToString("d"))</td>
				<td>@(category.ModifiedOn.HasValue ? category.ModifiedOn.Value.ToString("d") : "")</td>
				<td>@category.Archived</td>
				<td>
					<button class="btn btn-primary btn-sm mx-1" @onclick="@(() => GoToEdit(category.Id))">Edit</button>
					<button class="btn btn-info btn-sm mx-1" @onclick="@(() => GoToDetails(category.Id))">Details</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}

@code {

	/// <summary>
	///   The list of categories displayed in the grid.
	/// </summary>
	private IQueryable<CategoryDto>? _categories;

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	private string _username = "";

	/// <summary>
	///   Indicates whether the page is loading data.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	///   Stores error messages for display in the UI.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	///   Called when the component is initialized. Loads all categories for display.
	///   Adds structured logging for success and error cases.
	///   Also retrieves the authentication state.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{

		if (AuthenticationState is not null)
		{
			var state = await AuthenticationState;

			_username = state.User.Identity?.Name ?? string.Empty;
		}

		var result = await CategoriesHandler.HandleAsync();

		if (result.Success)
		{
			Logger.LogInformation("Categories loaded successfully. Count: {Count}", result.Value?.Count() ?? 0);
			_categories = result.Value?.AsQueryable() ?? null;
		}
		else
		{
			_errorMessage = result.Error ?? "Failed to load categories.";
			Logger.LogError("Failed to load categories. Error: {Error}", result.Error ?? "Unknown error");
			_categories = null;
		}

		_isLoading = false;

	}

	/// <summary>
	///   Navigates to the creation category page.
	/// </summary>
	private void GoToCreate()
	{
		Navigation.NavigateTo("/categories/create");
	}

	private void GoToEdit(Guid id)
	{
		// Use segment-style route to match route templates and tests
		Navigation.NavigateTo($"/categories/edit/{id}");
	}

	private void GoToDetails(Guid id)
	{
		// Navigate using the details route with segment id
		Navigation.NavigateTo($"/categories/{id}");
	}

}