@page "/categories/{id:guid}"
@using Web.Data.Models
@using Web.Components.Shared

@inject NavigationManager Navigation
@inject GetCategory.IGetCategoryHandler GetHandler
@inject ILogger<Details> Logger

@attribute [Authorize]

<PageHeadingComponent HeaderText="Category Details" Level="1" TextColorClass="blue-500" />

@if (_isLoading)
{
	<LoadingComponent />
}
else if (_category is null)
{
	<ErrorAlertComponent Title="Unable to load category">
		@(_errorMessage ?? "Category not found.")
	</ErrorAlertComponent>
}
else
{
	<div class="card">
		<div class="card-body">
			<h2>@_category?.CategoryName</h2>
			<p>CategoryCreated On: @_category?.CreatedOn.ToString("d")</p>
			<p>Modified On: @_category?.ModifiedOn?.ToString("d")</p>
			<button class="btn btn-secondary" @onclick="GoToEdit">Edit</button>
			<button class="btn btn-light ms-2" type="button" @onclick="GoToList">Back to List</button>
		</div>
	</div>
}

@code {

	/// <summary>
	/// The unique identifier of the category to display.
	/// </summary>
	[Parameter]
	public ObjectId Id { get; set; }

	/// <summary>
	/// The authentication state of the user.
	/// </summary>
	[CascadingParameter]
	private Task<AuthenticationState>? AuthenticationState { get; set; }

	/// <summary>
	/// The category data to be displayed on the page.
	/// </summary>
	private CategoryDto? _category;

	/// <summary>
	/// Error message returned by the handler when loading fails. Shown in the UI.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	/// Indicates whether the component is currently loading data.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	/// Initializes the component by loading the category data using the CategoryService.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		Logger.LogInformation("Loading category details for Id: {CategoryId}", Id);
		_isLoading = true;

		try
		{
			var result = await GetHandler.HandleAsync(Id);

			if (result.Success)
			{
				_category = result.Value;
				_errorMessage = null;
				Logger.LogInformation("Category loaded successfully: {CategoryId}", Id);
			}
			else
			{
				_category = null;
				_errorMessage = result.Error ?? "Category not found.";

				Logger.LogWarning("Failed to load category: {CategoryId}. Error: {Error}", Id, _errorMessage);
			}
		}
		finally
		{
			_isLoading = false;
		}
	}

	/// <summary>
	/// Navigates to the edit page for the current category.
	/// </summary>
	private void GoToEdit()
	{
		Navigation.NavigateTo($"/categories/edit/{Id}");
	}

	/// <summary>
	/// Navigates back to the category list page.
	/// </summary>
	private void GoToList()
	{
		Navigation.NavigateTo("/categories");
	}

}