@page "/articles/edit/{id:guid}"
@using Web.Components.Features.Articles.ArticleDetails
@using Web.Data.Models

@inject NavigationManager Navigation
@inject EditArticle.IEditArticleHandler ArticleHandler
@inject GetArticle.IGetArticleHandler GetArticleHandler
@inject ILogger<Edit> Logger

@attribute [Authorize(Roles = "Admin,Author")]

<PageHeadingComponent HeaderText="Edit Article" Level="1" TextColorClass="blue-500" />

@if (_isLoading)
{
	<LoadingComponent />
}
else if (_article is null)
{
	<p>Article not found.</p>
}
else
{
	<EditForm Model="_article" OnValidSubmit="HandleValidSubmit">
		<FluentValidationValidator />
		<ValidationSummary />
		@if (!string.IsNullOrEmpty(_errorMessage))
		{
			<div class="alert alert-danger">@_errorMessage</div>
		}
		<div class="mb-3">
			<label>Title</label>
			<InputText class="form-control" @bind-Value="_article.Title" />
		</div>
		<div class="mb-3">
			<label>Introduction</label>
			<InputText class="form-control" @bind-Value="_article.Introduction" />
		</div>
		<div class="mb-3">
			<label>Content</label>
			<InputTextArea class="form-control" @bind-Value="_article.Content" Rows="6" />
		</div>
		<div class="mb-3">
			<label>Cover Image URL</label>
			<InputText class="form-control" @bind-Value="_article.CoverImageUrl" />
		</div>
		<div class="mb-3">
			<label>Published</label>
			<InputCheckbox class="form-check-input" @bind-Value="_article.IsPublished" />
		</div>
		<div class="mb-3">
			<label>Archived</label>
			<InputCheckbox class="form-check-input" @bind-Value="_article.IsArchived" />
		</div>
		<button class="btn btn-success" type="submit" disabled="@_isSubmitting">@(_isSubmitting ? "Updating..." :
					"Edit")</button>
		<button class="btn btn-light ms-2" type="button" @onclick="GoToList">Cancel</button>
	</EditForm>
}

@code {

	/// <summary>
	/// Gets or sets the id of the article to edit.
	/// </summary>
	[Parameter]
	public required ObjectId Id { get; set; }
	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	/// <summary>
	/// Indicates whether the article is currently being loaded.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	/// Indicates whether the form is currently being submitted.
	/// </summary>
	private bool _isSubmitting;

	/// <summary>
	/// The article being edited, or null if not found.
	/// </summary>
	private ArticleDto? _article;

	/// <summary>
	/// Stores error messages for display in the UI.
	/// </summary>
	private string? _errorMessage;


	/// <summary>
	/// Initializes the component by loading the article data.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{

		var result = await GetArticleHandler.HandleAsync(Id);

		if (result.Success)
		{
			_article = result.Value ?? null;
			_isLoading = false;
		}
		else
		{
			Logger.LogError(result.Error ?? "An error occurred while fetching the article.");
			_errorMessage = result.Error ?? "An error occurred while fetching the article.";
			_article = null;
			_isLoading = false;
			StateHasChanged();
		}
	}

	/// <summary>
	/// Handles the submission of the edit form when valid.
	/// Updates the article and navigates back to the article detail page.
	/// </summary>

	private async Task HandleValidSubmit()
	{


		if (_article?.Title is null || _article.Title.Trim().Length == 0)
		{
			_errorMessage = "Title cannot be null or empty.";
			Logger.LogWarning("Article update failed: Title cannot be null or empty.");
			_isSubmitting = false;
			StateHasChanged();
			_isLoading = false;
			return; // prevent further processing which can cause NRE
		}

		_isSubmitting = true;

		if (_article is null)
		{
			Logger.LogError("Article data is missing.");
			_isSubmitting = false;
			_isLoading = false;
			return;
		}

		var result = await ArticleHandler.HandleAsync(_article);

		if (result.Success)
		{
			Logger.LogInformation("Category updated successfully: {Title}", _article.Title);
			_isSubmitting = false;
			_isLoading = false;
			GoToList();
		}
		else
		{
			Logger.LogError(result.Error ?? "An error occurred while updating the article.");
			_errorMessage = result.Error ?? "An error occurred while updating the article.";
			_isSubmitting = false;
			_isLoading = false;
			StateHasChanged();
		}
	}

	/// <summary>
	/// Navigates the user back to the article's list page.
	/// </summary>
	private void GoToList()
	{
		Navigation.NavigateTo("/articles");
	}

}