@page "/articles/create"
@using Web.Data.Models

@inject NavigationManager NavMan
@inject CreateArticle.Handler ArticleService
@inject ILogger<Create> Logger

@attribute [Authorize(Roles = "Admin,Author")]

<PageHeadingComponent HeaderText="Create Article" Level="1" TextColorClass="blue-500"/>

<EditForm Model="_article" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator/>
	<ValidationSummary/>
	@if (!string.IsNullOrEmpty(_errorMessage))
	{
		<div class="alert alert-danger">@_errorMessage</div>
	}
	<div class="mb-3">
		<label>Title</label>
		<InputText class="form-control" @bind-Value="_article.Title"/>
	</div>
	<div class="mb-3">
		<label>Introduction</label>
		<InputText class="form-control" @bind-Value="_article.Introduction"/>
	</div>
	<div class="mb-3">
		<label>Content</label>
		<InputTextArea class="form-control" @bind-Value="_article.Content" Rows="6"/>
	</div>
	<div class="mb-3">
		<label>Cover Image URL</label>
		<InputText class="form-control" @bind-Value="_article.CoverImageUrl"/>
	</div>
	<div class="mb-3">
		<label>Published</label>
		<InputCheckbox class="form-check-input" @bind-Value="_article.IsPublished"/>
	</div>
	<button class="btn btn-success" type="submit" disabled="@_isSubmitting">
		@(_isSubmitting ? "Creating..." : "Article Create")
	</button>
	<button class="btn btn-light ms-2" type="button" @onclick="GoToList">Cancel</button>
</EditForm>

@code {

	/// <summary>
	///   The article model bound to the form.
	/// </summary>
	private readonly ArticleDto _article = new();

	/// <summary>
	///   Stores the error message to display in the UI.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	///   Indicates whether the form is currently submitting.
	/// </summary>
	private bool _isSubmitting;

	/// <summary>
	///   Handles the valid form submission event for creating an article.
	/// </summary>
	/// <returns>A <see cref="Task" /> representing the asynchronous operation.</returns>
	private async Task HandleValidSubmit()
	{
		Logger.LogInformation("Submitting new article: {@Article}", _article);
		_isSubmitting = true;

		var result = await ArticleService.HandleAsync(_article);

		if (result.Success)
		{
			Logger.LogInformation("Article created successfully. ArticleId: {Title}", _article.Title);
			_isSubmitting = false;
			NavMan.NavigateTo("/articles");
		}
		else
		{
			Logger.LogError("Failed to create article. Error: {Error}", result.Error ?? "Unknown error");
			_errorMessage = result.Error ?? "An error occurred while creating the article.";
			_isSubmitting = false;
			StateHasChanged();
		}
	}

	/// <summary>
	///   Navigates to the article list page.
	/// </summary>
	private void GoToList()
	{
		NavMan.NavigateTo("/articles");
	}

}