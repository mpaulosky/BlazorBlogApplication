@page "/categories/create"
@using Web.Data.Models

@using Blazored.FluentValidation

@inject CreateCategory.ICreateCategoryHandler Handler
@inject NavigationManager NavMan
@inject ILogger<Create> Logger

@attribute [Authorize(Roles = "Admin")]

<PageHeadingComponent HeaderText="Create Category" Level="1" TextColorClass="blue-500" />

<EditForm Model="_category" OnValidSubmit="HandleValidSubmit">
	<FluentValidationValidator />
	<ValidationSummary />
	@if (!string.IsNullOrEmpty(_errorMessage))
	{
		<div class="alert alert-danger">@_errorMessage</div>
	}
	<div class="mb-3">
		<label for="name">CategoryName</label>
		<InputText id="name" class="form-control" @bind-Value="_category.CategoryName" />
	</div>
	<button class="btn btn-success" type="submit" disabled="@_isSubmitting">
		@(_isSubmitting ? "Creating..." : "Save Changes")
	</button>
	<button class="btn btn-light ms-2" type="button" @onclick="GoToList">Cancel</button>
</EditForm>

@code {

	/// <summary>
	/// The category model bound to the form.
	/// </summary>
	private readonly CategoryDto _category = new();
	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	/// <summary>
	/// Stores the error message to display in the UI.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	/// Indicates whether the form is currently submitting.
	/// </summary>
	private bool _isSubmitting;

	/// <summary>
	/// Handles the valid form submission event for creating a category.
	/// </summary>
	/// <returns>A <see cref="Task" /> representing the asynchronous operation.</returns>
	private async Task HandleValidSubmit()
	{
		_isSubmitting = true;

		if (_category.CategoryName.Trim().Length == 0)
		{
			_isSubmitting = false;
			_errorMessage = "CategoryName cannot be empty.";
			Logger.LogWarning("Category creation failed: CategoryName cannot be empty.");

			return;
		}

		var result = await Handler.HandleAsync(_category);

		if (result.Success)
		{
			Logger.LogInformation("Category created successfully: {CategoryName}", _category.CategoryName);
			_isSubmitting = false;
			NavMan.NavigateTo("/categories");
		}
		else
		{
			Logger.LogError(result.Error ?? "An error occurred while creating the category.");
			_isSubmitting = false;
			_errorMessage = result.Error ?? "An error occurred while creating the category.";
		}
	}

	/// <summary>
	/// Navigates to the category list page.
	/// </summary>
	private void GoToList()
	{
		NavMan.NavigateTo("/categories");
	}

}