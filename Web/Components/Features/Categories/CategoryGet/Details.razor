@page "/categories/{id:guid}"

@using System.Globalization
@using MongoDB.Bson
@using Web.Data.Models

@inject NavigationManager Navigation
@inject GetCategory.Handler GetHandler
@inject ILogger<Details> Logger

@attribute [Authorize(Roles = "Admin")]

<PageHeadingComponent HeaderText="Category Details" Level="1" TextColorClass="blue-500"/>

@if (_isLoading)
{
	<LoadingComponent/>
}
else if (_category is null)
{
	<p>Category not found.</p>
}
else
{
	<div class="card">
		<div class="card-body">
			<h2>@_category?.CategoryName</h2>
			@if (_category?.CreatedOn != null)
			{
				<div>CategoryCreated On: @_category.CreatedOn.ToString("M/d/yyyy", CultureInfo.InvariantCulture)</div>
			}
			@if (_category?.ModifiedOn != null)
			{
				<div>Modified On: @_category.ModifiedOn?.ToString("M/d/yyyy", CultureInfo.InvariantCulture)</div>
			}
			<button class="btn btn-secondary" @onclick="GoToEdit">Edit</button>
			<button class="btn btn-light ms-2" type="button" @onclick="GoToList">Back to List</button>
		</div>
	</div>
}

@code {

	/// <summary>
	///   The unique identifier of the category to display.
	/// </summary>
	[Parameter]
	public ObjectId Id { get; set; }

	/// <summary>
	///   The category data to be displayed on the page.
	/// </summary>
	private CategoryDto? _category;

	/// <summary>
	///   Indicates whether the component is currently loading data.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	///   Initializes the component by loading the category data using the CategoryService.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		Logger.LogInformation("Loading category details for Id: {CategoryId}", Id);
		_isLoading = true;

		try
		{
			var result = await GetHandler.HandleAsync(Id);

			if (result.Success)
			{
				_category = result.Value;
				Logger.LogInformation("Category loaded successfully: {CategoryId}", Id);
			}
			else
			{
				Logger.LogWarning("Failed to load category: {CategoryId}. Error: {Error}", Id, result.Error ?? "Unknown error");
				_category = null;
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Exception occurred while loading category: {CategoryId}", Id);
			_category = null;
		}
		finally
		{
			_isLoading = false;
		}

	}

	/// <summary>
	///   Navigates to the edit page for the current category.
	/// </summary>
	private void GoToEdit()
	{
		Navigation.NavigateTo($"/categories/edit/{Id}");
	}

	/// <summary>
	///   Navigates back to the category list page.
	/// </summary>
	private void GoToList()
	{
		Navigation.NavigateTo("/categories");
	}

}